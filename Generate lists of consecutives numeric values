Exercise #1: Generate lists of consecutives numeric values


Solution #1: We create lists of consecutive numeric values using the UNION operator.

Tables used: 
1) [AdventureWorks2022].[Person].[BusinessEntity]	
2) [AdventureWorks2022].[Sales].[SalesOrderDetail]

	Query #1: We create a list of consecutive numeric values starting from zero using the UNION operator
	---------
SELECT 0 AS Position							                          -- FirstRowWithZeroLevel1
FROM [AdventureWorks2022].[Person].[BusinessEntity]			    -- FirstRowWithZeroLevel1
UNION 
SELECT BusinessEntityID AS Position					                -- RowTwoOnwardsLevel1
FROM [AdventureWorks2022].[Person].[BusinessEntity]			    -- RowTwoOnwardsLevel1
ORDER BY Position


SELECT 0 AS Position                                        -- FirstRowWithZeroLevel1
FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]			  -- FirstRowWithZeroLevel1
UNION
SELECT SalesOrderDetailID AS Position                       -- RowTwoOnwardsLevel1
FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]			  -- RowTwoOnwardsLevel1
ORDER BY Position


	-- OUTPUT #1:
Position
0
1
2
3
4
...........TRUNCATED RESULTS ......
20774
20775
20776
20777
(end of results)
(20778 rows affected)


	-- OUTPUT #2:
Position
0
1
2
3
4
...........TRUNCATED RESULTS ......
121314
121315
121316
121317
(end of results)
(121318 rows affected)


	Comments on above results:
a) Column "BusinessEntityID" from Table [AdventureWorks2022].[Person].[BusinessEntity] has 20,777 rows with unique consecutive values starting from 1 until 20,777.
b) Column "SalesOrderDetailID" from Table [AdventureWorks2022].[Person].[BusinessEntity] has 121,317 rows with unique consecutive values starting from 1 until 121,317.
c) UNION operator removes duplicated records. These 2 examples have no duplicates.




	Query #1.1: We create a list of consecutive numeric values starting from one using the UNION operator
	-----------
SELECT 1 AS Position							-- FirstRowWithOneLevel1
FROM [AdventureWorks2022].[Person].[BusinessEntity]			-- FirstRowWithOneLevel1
UNION 
SELECT BusinessEntityID AS Position					-- RowTwoOnwardsLevel1
FROM [AdventureWorks2022].[Person].[BusinessEntity]			-- RowTwoOnwardsLevel1
ORDER BY Position


SELECT 1 AS Position							-- FirstRowWithOneLevel1
FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]			-- FirstRowWithOneLevel1
UNION
SELECT SalesOrderDetailID AS Position					-- RowTwoOnwardsLevel1
FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]			-- RowTwoOnwardsLevel1
ORDER BY Position


	-- OUTPUT #1:
Position
1
2
3
4
...........TRUNCATED RESULTS ......
20774
20775
20776
20777
(end of results)
(20777 rows affected)


	-- OUTPUT #2:
Position
1
2
3
4
...........TRUNCATED RESULTS ......
121314
121315
121316
121317
(end of results)
(121317 rows affected)


	Comments on above results:
a) UNION operator removes the duplicated record of 1 from both queries.
The number of rows affected from both queries from Query #1.1 is one less than those from Query #1. 




	Query #2: We create a list of consecutive numeric values starting from one using a Cartesian Product
	---------
SELECT InitialList.Position
, InitialList.Position * Iteration.Position AS CartesianProductDim1X20777
FROM 
	(
	SELECT BusinessEntityID AS Position					-- OneRowWithNumberOneLevel1
	FROM [AdventureWorks2022].[Person].[BusinessEntity]			-- OneRowWithNumberOneLevel1
	WHERE BusinessEntityID < 2
	) AS InitialList,
	(
	SELECT BusinessEntityID AS Position					-- 20777RowsStartingAt1Level1
	FROM [AdventureWorks2022].[Person].[BusinessEntity]			-- 20777RowsStartingAt1Level1
	) AS Iteration
ORDER BY CartesianProductDim1X20777


	-- OUTPUT
Position	CartesianProductDim1X20777
1		1
1		2
1		3
1		4
1		5
...........TRUNCATED RESULTS ......
1		20773
1		20774
1		20775
1		20776
1		20777
(end of results)
(20777 rows affected)


	Comments on above results:
The new table resulting from the Cartesian Product has a dimension of 20,777 rows = 1 X 20777.
20,777 rows = number of rows on column "BusinessEntityID" from [AdventureWorks2022].[Person].[BusinessEntity].




	Query #2.1: We create a list of consecutive numeric values starting from one using a Cartesian Product
	---------
SELECT ROW_NUMBER() OVER (ORDER BY Iteration.Position) AS RowNumber
, InitialList.Position * Iteration.Position AS CartesianProductDim2X20777
FROM 
	(
	SELECT BusinessEntityID AS Position				-- TwoRowsWithNumbersOneAndTwoLevel1
	FROM [AdventureWorks2022].[Person].[BusinessEntity]		-- TwoRowsWithNumbersOneAndTwoLevel1
	WHERE BusinessEntityID < 3
	) AS InitialList,
	(
	SELECT BusinessEntityID AS Position				-- 20777RowsStartingAt1Level1
	FROM [AdventureWorks2022].[Person].[BusinessEntity]		-- 20777RowsStartingAt1Level1
	) AS Iteration
ORDER BY Iteration.Position ASC


	-- OUTPUT
RowNumber	CartesianProductDim2X20777
1		1
2		2
3		2
4		4
5		3
...........TRUNCATED RESULTS ......
41549		20775
41550		41550
41551		20776
41552		41552
41553		20777
41554		41554
(end of results)
(41554 rows affected)


	Comments on above results:
As mentioned before, 20,777 rows = number of rows on column "BusinessEntityID" from [AdventureWorks2022].[Person].[BusinessEntity].
The new table resulting from the Cartesian Product has a dimension of 41,554 rows = 2 X 20777.
We use function ROW_NUMBER to create unique consecutive numbers starting from 1 until 41,554.


We can increase the number of rows resulting from the Cartesian Product by increasing the number in the WHERE clause from subquery "InitialList".
In Query #2 we used "WHERE BusinessEntityID < 2", producing 20,777 rows.
In Query #2.1 we used "WHERE BusinessEntityID < 3", producing 41,554 rows.
We can increase the resulting number of rows up to 431,683,729 rows, which is 20,777 X 20,777.




	Query #3: We create a list of consecutive numeric values starting from one using Common Table Expression (CTEs)
	---------
WITH 
ConsecutiveNumbers AS 
(
SELECT 1 AS RowNumber
UNION ALL
SELECT BusinessEntityID + 1 AS RowNumber
FROM [AdventureWorks2022].[Person].[BusinessEntity]
WHERE BusinessEntityID + 1 < 20000
)
SELECT * 
FROM ConsecutiveNumbers
ORDER BY RowNumber



WITH 
ConsecutiveNumbers AS 
(
SELECT 1 AS RowNumber
UNION ALL
SELECT SalesOrderDetailID + 1 AS RowNumber
FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]
WHERE SalesOrderDetailID + 1 < 100000
)
SELECT * 
FROM ConsecutiveNumbers
ORDER BY RowNumber


	-- OUTPUT #1:
RowNumber
1
2
3
4
5
...........TRUNCATED RESULTS ......
19995
19996
19997
19998
19999
(end of results)
(19999 rows affected)	


	-- OUTPUT #2:
RowNumber
1
2
3
4
5
...........TRUNCATED RESULTS ......
99995
99996
99997
99998
99999
(end of results)
(99999 rows affected)
